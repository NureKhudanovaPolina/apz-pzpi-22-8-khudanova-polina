МІНЕСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмна інженерія»



ЗВІТ
з практичної роботи №2
з дисципліни «Архітектура програмного забезпечення»



Виконала:
Ст. гр. ПЗПІ-22-8
Худанова Поліна
	Перевірив:
ст. викладач каф. ПІ
Сокорчук І. П.



Харків 2025


 
1 ІСТОРІЯ ЗМІН
Таблиця 1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	16.08.2025	0.1	Створено розділ «Завдання»
2	16.08.2025	0.2	Додано опис виконаної роботи
3	16.08.2025	1.0	Оформлено висновки, додано додатки

2 ЗАВДАННЯ
Метою роботи полягає у вивченні архітектури складної програмної системи на прикладі Spotify, аналізі її компонентів, принципів побудови та взаємодії сервісів. Основне завдання — дослідити, як система організовує обробку великих обсягів даних, забезпечує масштабованість, надійність та персоналізацію сервісів для мільйонів користувачів.

3 ОПИС ВИКОНАНОЇ РОБОТИ
Spotify — це популярний стрімінговий сервіс для прослуховування музики, який обслуговує мільйони користувачів щодня. Його архітектура побудована на мікросервісному підході, що дозволяє кожному компоненту системи працювати незалежно та масштабуватися відповідно до потреб користувачів. Мікросервіси відповідають за різні функції: управління плейлистами, пошук музики, рекомендації, обробку аналітики, роботу з користувачами та безпеку.
Кожен мікросервіс має свою базу даних або кеш, що ізолює дані та забезпечує швидкий доступ. Для обміну інформацією між сервісами використовується REST API та асинхронні повідомлення через Kafka, що дозволяє обробляти великі обсяги подій і підтримувати роботу системи в реальному часі.
Фронтенд Spotify, який включає мобільні та десктопні додатки, підключається до системи через API Gateway, що виступає єдиним точкою входу для всіх запитів. API Gateway забезпечує маршрутизацію, балансування навантаження та контроль безпеки, а також спрощує інтеграцію нових мікросервісів.
Для зберігання даних Spotify використовує комбінацію SQL і NoSQL баз даних. PostgreSQL зберігає критичні структуровані дані користувачів, Cassandra та Elasticsearch обробляють великі потоки подій і забезпечують швидкий пошук. Redis використовується як кеш для прискорення доступу до часто використовуваних даних, що значно покращує продуктивність системи.
Система також включає сервіси для обробки аналітики та персоналізованих рекомендацій. На основі поведінки користувачів, історії прослуховування та вподобань формуються індивідуальні плейлисти, рекомендації нових треків та музичні підбірки. Spotify активно використовує алгоритми машинного навчання для поліпшення точності рекомендацій.
Архітектура побудована з урахуванням масштабованості та надійності. Кожен компонент можна оновлювати окремо без зупинки всієї системи. Збої одного сервісу не впливають на роботу інших, що дозволяє підтримувати стабільну роботу навіть при високому навантаженні.
Мета такої архітектури — забезпечити швидку обробку запитів, ефективне масштабування та можливість інтеграції нових функцій без порушення роботи системи. Вона дозволяє швидко реагувати на зміни потреб користувачів, впроваджувати інновації та підтримувати мільйони одночасних підключень.

4 ВИСНОВКИ
Архітектура Spotify демонструє ефективне використання мікросервісного підходу для побудови складної глобальної системи. Вона забезпечує масштабованість, надійність, легкість оновлення та інтеграції нових функцій, що робить її прикладом сучасного підходу до розробки великих програмних систем.





ДОДАТОК А

Посилання на відеозапис доповіді та хронологічний опис.
Відеозапис доповіді на YouTube: 

Хронологічний опис:
00:00 - Вступ. 
00:00 - Огляд 
00:00 - Основні сервіси  
00:00 - Розбір роботи 
00:00 - Архітектурна модель
00:00 - Принцип 
00:00 - Приклад комплексної архітектури на 
00:00 - Висновки





ДОДАТОК Б

Слайди презентації доповіді 

Рисунок Б.1 – Архітектура Spotify
 
Рисунок Б.2 – Вступ
 
Рисунок Б.3 – Розподіл відповідальності
 
Рисунок Б.4 – Взаємодія мікросервісів
 
Рисунок Б.5 – Фронтенд та API Gateway
 
Рисунок Б.6 – Стратегії зберігання даних
 
Рисунок Б.7 – Персоналізовані рекомендації
 
Рисунок Б.8 – Маштабність
 
Рисунок Б.9 – Переваги мікросервісного підходу
 
Рисунок Б.10 – Висновки

