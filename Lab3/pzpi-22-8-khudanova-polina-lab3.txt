Міністерство освіти та науки України
Харківський національний університет
радіоелектроніки

Кафедра ПІ


Звіт
З лабораторної роботи 3
з дисципліни «Розробка програмної архітектури, створення та відлагодження програмного коду веб-клієнта програмної системи»



Виконала:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Худаанова П.А.	 



Харків 2025




 
Мета роботи:
Потрібно розробити програмне забезпечення для IoT або SmartDevice пристрою, реалізованого на базі будь-якої поширеної на сьогодні платформи, придатної для реалізації вбудованих систем (Embedded System).
Історія змін:
№	Дата	Версія	Опис змін	Автор
1	19.08.2025	0.1	Створено розділ «Опис виконаної роботи»	Худанова Поліна
2	19.08.2025	0.1	Створено розділ «Висновки»	Худанова Поліна
3	19.08.2025	0.1	Створено додатки	Худанова Поліна
Опис виконаної роботи:
В ході виконання лабораторної роботи було розроблено веб-додаток для управління тваринами та моніторингу їхньої температури в реальному часі. На першому етапі була створена база даних MySQL, в якій зберігаються дані користувачів та їхніх тварин. Для забезпечення безпечного доступу до додатку реалізовано систему аутентифікації та авторизації за допомогою Node.js, bcrypt для хешування паролів та JSON Web Token для керування сесіями користувачів. Фронтенд додатку включає форму реєстрації, логіну та інтерфейс для додавання тварин і перегляду їхніх даних, включаючи температуру.
Для отримання температури тварин в реальному часі був розроблений Python IoT-сервер, який підключається до бази даних та генерує температуру для кожної тварини. Дані передаються у Node.js сервер через MQTT-брокер Mosquitto. Node.js сервер підписується на відповідну тему та зберігає останні отримані значення температур у внутрішньому кеші, який використовує фронтенд для відображення актуальної інформації. Такий підхід дозволяє користувачам бачити температуру своїх тварин майже миттєво після її оновлення.
Всі основні компоненти системи працюють інтегровано: база даних, Node.js сервер, MQTT-брокер і Python IoT-сервер. Завдяки використанню MQTT досягнута ефективна та швидка передача даних, що імітує роботу IoT-пристроїв для моніторингу стану тварин.
Висновки:
У результаті виконання лабораторної роботи було показано інтеграцію веб-додатку з IoT-технологіями для віддаленого моніторингу параметрів тварин. Використання MQTT забезпечує реальний час оновлення даних, а Node.js і MySQL гарантують надійне збереження та обробку інформації користувачів і їхніх тварин. 





ДОДАТОК А
Посилання на відеозапис доповіді

Відеозапис доповіді на YouTube: https://youtu.be/MaabYoP70EA
Нижче наведено хронологічний опис доповіді.
00:00 – Вітання
0:21 – Вікно реєстрації 
0:40 – Вікно входу 
00:50 – Демонстрація функцій 
01:40 – Завершення




ДОДАТОК Б
 
Рисунок Б.1 — Діаграма взаємодії
 
Рисунок Б.2 — Діаграма компонентів
 
Рисунок Б.3 — UML-діаграма прецедентів
 
Рисунок Б.4 — Діаграма діяльності





ДОДАТОК В
Програмий код

В.1 Підключення Node.js сервера до MQTT-брокера
GitHub репозиторій: https://github.com/NureKhudanovaPolina/apz-pzpi-22-8-khudanova-polina/blob/main/Lab3/pzpi-22-8-khudanova-polina-lab3/server.js
1  const mqtt = require("mqtt");
2  const client = mqtt.connect("mqtt://localhost:1883");
3  
4  let petTemperatures = {};
5  
6  client.on("connect", () => {
7    console.log("Підключено до MQTT брокера");
8    client.subscribe("pets/temperature", (err) => {
9      if (!err) console.log("Підписка на тему pets/temperature успішна");
10   });
11 });
12 
13 client.on("message", (topic, message) => {
14   if (topic === "pets/temperature") {
15     const [id, temp] = message.toString().split(",");
16     petTemperatures[id] = parseFloat(temp);
17     console.log(`Оновлено температуру тварини ${id}: ${temp}`);
18   }
19 });
