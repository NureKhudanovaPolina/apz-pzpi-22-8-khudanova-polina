МІНЕСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмна інженерія»



ЗВІТ
з практичної роботи №1
з дисципліни «Архітектура програмного забезпечення»



Виконала:
Ст. гр. ПЗПІ-22-8
Худанова Поліна
	Перевірив:
ст. викладач каф. ПІ
Сокорчук І. П.



Харків 2025


 
1 ІСТОРІЯ ЗМІН
Таблиця 1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	15.08.2025	0.1	Створено розділ «Завдання»
2	15.08.2025	0.2	Додано опис виконаної роботи
3	15.08.2025	1.0	Оформлено висновки, додано додатки

2 ЗАВДАННЯ
Метою роботи полягає у вивченні принципів роботи патерна «Декоратор», розумінні його переваг і недоліків, а також демонстрації практичного прикладу його реалізації на мові програмування. 

3 ОПИС ВИКОНАНОЇ РОБОТИ
У процесі виконання роботи було досліджено патерн проєктування Decorator.

Патерн проєктування «Декоратор» належить до структурних шаблонів і використовується для динамічного додавання нової функціональності об’єктам без зміни їхньої початкової структури чи коду. Основна ідея полягає в тому, щоб «загортати» об’єкт у спеціальний клас-декоратор, який реалізує той самий інтерфейс і може додавати власну поведінку перед або після виклику основних методів. Це дозволяє розширювати можливості програмних компонентів у гнучкий спосіб, не порушуючи принцип відкритості/закритості (Open/Closed Principle). 
Патерн особливо корисний тоді, коли необхідно додавати функції багатьом об’єктам, але не можна або недоцільно змінювати базові класи. Наприклад, у графічному інтерфейсі можна додати рамку або прокрутку для вікна, не змінюючи сам клас вікна.
У Додатку В наведено приклад реалізації патерна на мові Python. Спочатку створюється базовий інтерфейс Coffee, який описує метод cost. Клас SimpleCoffee є основною реалізацією. Далі створюється абстрактний клас CoffeeDecorator, що приймає об’єкт Coffee і передає виклик методів базовому об’єкту. Конкретні декоратори, такі як MilkDecorator і SugarDecorator, додають власний функціонал до обчислення вартості.


4 ВИСНОВКИ
Патерн «Декоратор» дозволяє створювати гнучкі та масштабовані рішення, розширюючи функціональність об’єктів без необхідності змінювати їхню початкову реалізацію. Це дає змогу легко додавати та комбінувати нові можливості, зберігаючи чистоту та зрозумілість коду, що особливо важливо у великих та довготривалих проєктах.






ДОДАТОК А

Посилання на відеозапис доповіді та хронологічний опис.
Відеозапис доповіді на YouTube: https://youtu.be/r4m-JI3XpMY

Хронологічний опис:
0:00 Вступ
0:29 Що таке патерн Декоратор
1:00 Де застосовувати патерн
1:33 Приклад з життя
2:00 Структура патерну
2:19 Приклад реалізації
2:55 Приклад декораторів для модифікації
3:45 Результат коду
4:08 Недоліки
4:32 Висновки







ДОДАТОК Б

Слайди презентації доповіді

 
Рис. Б.1 – Титульний слайд
 
Рис. Б.2 – Що таке патерн Декоратор?
 
Рис. Б.3 – Застосування патерну Декоратор
 
Рис. Б.4 – Аналог з життя
 
Рис. Б.5 – Структура патерну на прикладі з життя
 
Рис. Б.6 – Приклад коду
 
Рис. Б.7 – Приклад коду застосування Декоратору для модифікації
 
Рис. Б.8 – Результат виконання коду
 
Рис. Б.9 – Недоліки
 
Рис. Б.10 – Висновок





ДОДАТОК В
Програмний код
 1 from abc import ABC, abstractmethod
 2 
 3 # Базовий інтерфейс
 4 class Coffee(ABC):
 5     @abstractmethod
 6     def cost(self):
 7         pass
 8     
 9     @abstractmethod
10     def description(self):
11         pass
12 
13 # Конкретний клас
14 class SimpleCoffee(Coffee):
15     def cost(self):
16         return 10
17     
18     def description(self):
19         return "Проста кава"
20 
21 # Базовий декоратор
22 class CoffeeDecorator(Coffee):
23     def __init__(self, coffee):
24         self._coffee = coffee
25     
26     def cost(self):
27         return self._coffee.cost()
28     
29     def description(self):
30         return self._coffee.description()
31 
32 # Декоратор для молока
33 class MilkDecorator(CoffeeDecorator):
34     def cost(self):
35         return self._coffee.cost() + 3
36     
37     def description(self):
38         return self._coffee.description() + ", молоко"
39 
40 # Декоратор для цукру
41 class SugarDecorator(CoffeeDecorator):
42     def cost(self):
43         return self._coffee.cost() + 1
44     
45     def description(self):
46         return self._coffee.description() + ", цукор"
47 
48 # Використання
49 coffee = SimpleCoffee()
50 print(coffee.description(), "-", coffee.cost(), "грн")
51 
52 coffee_with_milk = MilkDecorator(coffee)
53 print(coffee_with_milk.description(), "-", coffee_with_milk.cost(), "грн")
54 
55 coffee_with_milk_sugar = SugarDecorator(coffee_with_milk)
56 print(coffee_with_milk_sugar.description(), "-", coffee_with_milk_sugar.cost(), "грн")  
