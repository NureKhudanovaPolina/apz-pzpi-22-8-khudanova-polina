 from abc import ABC, abstractmethod
 
 # Базовий інтерфейс
 class Coffee(ABC):
     @abstractmethod
     def cost(self):
         pass
     
     @abstractmethod
     def description(self):
         pass
 
 # Конкретний клас
 class SimpleCoffee(Coffee):
     def cost(self):
         return 10
     
     def description(self):
         return "Проста кава"
 
 # Базовий декоратор
 class CoffeeDecorator(Coffee):
     def __init__(self, coffee):
         self._coffee = coffee
     
     def cost(self):
        return self._coffee.cost()
     
     def description(self):
         return self._coffee.description()
 
 # Декоратор для молока
 class MilkDecorator(CoffeeDecorator):
     def cost(self):
         return self._coffee.cost() + 3
     
     def description(self):
         return self._coffee.description() + ", молоко"
 
 # Декоратор для цукру
 class SugarDecorator(CoffeeDecorator):
     def cost(self):
         return self._coffee.cost() + 1
     
     def description(self):
         return self._coffee.description() + ", цукор"
 
 # Використання
 coffee = SimpleCoffee()
 print(coffee.description(), "-", coffee.cost(), "грн")
 
 coffee_with_milk = MilkDecorator(coffee)
 print(coffee_with_milk.description(), "-", coffee_with_milk.cost(), "грн")
 
 coffee_with_milk_sugar = SugarDecorator(coffee_with_milk)
 print(coffee_with_milk_sugar.description(), "-", coffee_with_milk_sugar.cost(), "грн")  
