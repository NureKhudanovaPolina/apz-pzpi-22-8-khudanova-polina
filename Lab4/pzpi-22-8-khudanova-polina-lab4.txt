Міністерство освіти та науки України
Харківський національний університет
радіоелектроніки

Кафедра ПІ

Звіт
З лабораторної роботи 4
з дисципліни «Розробка програмної архітектури та створення і відлагодження програмного коду програмного застосунку мобільного пристрою для програмної системи»


Виконала:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Худанова П.А.	 


Харків 2025


 
Мета роботи:
Потрібно розробити клієнтську / front-end частину програмної систем.

Історія змін:
№	Дата	Версія	Опис змін	Автор
1	21.08.2025	0.1	Створено розділ «Опис виконаної роботи»	Худанова Поліна
2	21.08.2025	0.1	Створено розділ «Висновки»	Худанова Поліна
3	21.08.2025	0.1	Створено додатки	Худанова Поліна

Опис виконаної роботи:
Веб-частина розробленої програмної системи побудована за клієнт-серверною архітектурою. Клієнтська частина реалізована на основі HTML, CSS та JavaScript і відповідає за відображення інтерфейсу користувача та обробку його взаємодії. Серверна частина працює на Node.js із використанням фреймворку Express, який забезпечує маршрутизацію, обробку HTTP-запитів та взаємодію з базою даних MySQL. 
Для отримання даних від IoT-пристроїв, зокрема температури тварин, застосовується протокол MQTT. У веб-частині реалізовано механізми безпечної автентифікації користувачів із використанням шифрування паролів за допомогою bcrypt та токенів JWT для перевірки сесій і контролю доступу до функцій системи. Бізнес-логіка веб-частини надає користувачам можливість реєструватися та входити в систему, додавати, редагувати та видаляти своїх тварин, переглядати температуру тварин у реальному часі та оновлювати дані вручну. 
Адміністратори мають розширені права, що дозволяє їм переглядати всі записи користувачів та тварин, редагувати або видаляти будь-які записи та керувати ролями користувачів. Захист даних реалізовано на рівні шифрування паролів, перевірки JWT-токенів та ролей користувачів, а також контролю доступу через CORS. Веб-частина взаємодіє з серверною частиною через REST API для отримання та оновлення даних і за допомогою MQTT для підключення до IoT-пристроїв, що надсилають показники температури в реальному часі. 
Інтерфейс підтримує багатомовність завдяки можливості зберігання текстових ресурсів у окремих файлах для різних мов і завантаження їх залежно від вибору користувача. На даний момент система реалізована українською мовою, проте її структура дозволяє легко додавати інші мови для локалізації. 
Адміністративні функції дозволяють налаштовувати систему, керувати користувачами та їх тваринами, контролювати актуальні дані про здоров’я тварин і забезпечують ефективне адміністрування веб-частини системи.

Висновки:
У результаті виконання лабораторної роботи №4 була розроблена веб-частина системи, яка є функціональною, безпечною та зручною для користувачів та адміністраторів. Клієнтська частина забезпечує зручний інтерфейс для управління тваринами та перегляду даних у реальному часі. Серверна частина надає надійну бізнес-логіку, захист даних і ефективну взаємодію з базою даних та IoT-пристроями. Система підтримує багатомовність та розділення ролей, що робить її гнучкою і придатною для масштабування та подальшого розвитку. Веб-частина відповідає сучасним вимогам до зручності, безпеки та адаптивності інтерфейсу, забезпечуючи ефективне адміністрування та управління даними користувачів і тварин.






ДОДАТОК А
Посилання на відеозапис доповіді

Відеозапис доповіді на YouTube: https://youtu.be/z66649b2TH0
Нижче наведено хронологічний опис доповіді.
00:00 – Вітання
0:18 – Вікно входу
0:25 – Демонстрація розділу функцій по ролям (адмін)
01:42 – Демонстрація функцій для ролі звичайного користувача
02:56 – Завершення






ДОДАТОК Б
 
Рисунок Б.1 — Діаграма взаємодії
 
Рисунок Б.2 — Діаграма компонентів
 
Рисунок Б.3 — UML-діаграма прецедентів
 
Рисунок Б.4 — Діаграма діяльності





ДОДАТОК В
Програмний код

В.1 Додавання та отримання тварин користувача
GitHub репозиторій: https://github.com/NureKhudanovaPolina/apz-pzpi-22-8-khudanova-polina/blob/main/Lab4/pzpi-22-8-khudanova-polina-lab4/server.js
1   app.get("/pets", authMiddleware, async (req, res) => {
2     try {
3       const [rows] = await db.query("SELECT * FROM pets WHERE ownerId = ?", [req.user.id]);
4       const petsWithTemp = rows.map(pet => ({
5         ...pet,
6         temperature: petTemperatures[pet.id] || (37 + Math.random() * 2).toFixed(1)
7       }));
8       res.json(petsWithTemp);
9     } catch (err) {
10      res.status(500).json({ error: "Помилка сервера" });
11    }
12  });
13  
14  app.post("/pets", authMiddleware, async (req, res) => {
15    const { name, species, breed } = req.body;
16    try {
17      const [result] = await db.query(
18        "INSERT INTO pets (name, species, breed, ownerId) VALUES (?, ?, ?, ?)",
19        [name, species, breed, req.user.id]
20      );
21      const [rows] = await db.query("SELECT * FROM pets WHERE id = ?", [result.insertId]);
22      res.json(rows[0]);
23    } catch (err) {
24      res.status(500).json({ error: "Помилка додавання тварини" });
25    }
26  });


В.2 Реєстрація та вхід користувача
GitHub репозиторій: https://github.com/NureKhudanovaPolina/apz-pzpi-22-8-khudanova-polina/blob/main/Lab4/pzpi-22-8-khudanova-polina-lab4/server.js
1   app.post("/auth/register", async (req, res) => {
2     const { name, email, password } = req.body;
3     const hashedPassword = await bcrypt.hash(password, 10);
4     await db.query("INSERT INTO users (name, email, password) VALUES (?, ?, ?)", [name, email, hashedPassword]);
5     res.json({ message: "Користувач зареєстрований" });
6   });
7  
8   app.post("/auth/login", async (req, res) => {
9     const { email, password } = req.body;
10    const [rows] = await db.query("SELECT * FROM users WHERE email = ?", [email]);
11    const user = rows[0];
12    const isMatch = await bcrypt.compare(password, user.password);
13    if (!isMatch) return res.status(400).json({ error: "Невірний email або пароль" });
14    const token = jwt.sign({ id: user.id, email: user.email }, SECRET_KEY, { expiresIn: "1h" });
15    res.json({ message: "Успішний вхід", token });
16  });


В.3 Додавання тварини через клієнтський JS
GitHub репозиторій: https://github.com/NureKhudanovaPolina/apz-pzpi-22-8-khudanova-polina/blob/main/Lab4/pzpi-22-8-khudanova-polina-lab4/script.js
1   savePetBtn.onclick = async () => {
2     const name = document.getElementById("pet-name").value;
3     const species = document.getElementById("pet-species").value;
4     const breed = document.getElementById("pet-breed").value;
5     const res = await fetch("http://localhost:3000/pets", {
6       method: "POST",
7       headers: { "Content-Type": "application/json", "Authorization": "Bearer " + token },
8       body: JSON.stringify({ name, species, breed })
9     });
10    const pet = await res.json();
11    loadPets();
12  };
